import pygame
import sys
import AI
import os

def load_matrix_from_file(filename, folder_path="testcase"):
    file_path = os.path.join(folder_path, filename)
    with open(file_path, "r") as f:
        matrix = [[int(num) for num in line.split()] for line in f]
    return matrix

def create_table(matrix):
    size = len(matrix)
    table = []
    for i in range(size):
        row = []
        for j in range(size):
            if matrix[i][j] > 0:
                row.append([matrix[i][j], 0])  # √î ƒë√£ m·ªü 
            elif matrix[i][j] == 0:
                row.append([0, 0])  # √î ch∆∞a m·ªü
        table.append(row)
    return table


def draw_grid(screen, table, size, cell_size):
    font = pygame.font.Font(None, 30)  # Font cho ch·ªâ s·ªë h√†ng & c·ªôt
    padding = cell_size  # L·ªÅ ƒë·ªÉ ch·ª©a s·ªë h√†ng & c·ªôt

    for i in range(size):
        for j in range(size):
            x, y = j * cell_size + padding, i * cell_size + padding
            value, _ = table[i][j]

            # M·∫∑c ƒë·ªãnh t√¥ m√†u tr·∫Øng cho √¥ ch∆∞a m·ªü
            color = (255, 255, 255)

            # V·∫Ω √¥ l∆∞·ªõi
            pygame.draw.rect(screen, color, (x, y, cell_size, cell_size))

            # N·∫øu l√† √¥ ƒë√£ m·ªü v√† an to√†n (-2) => V·∫Ω v√≤ng tr√≤n xanh
            if value == -2:
                pygame.draw.circle(screen, (0, 255, 0), (x + cell_size // 2, y + cell_size // 2), cell_size // 3)

            # N·∫øu l√† √¥ m√¨n ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u (-1) => V·∫Ω v√≤ng tr√≤n ƒë·ªè
            elif value == -1:
                pygame.draw.circle(screen, (255, 0, 0), (x + cell_size // 2, y + cell_size // 2), cell_size // 3)

            # N·∫øu √¥ c√≥ s·ªë (> 0) => Hi·ªÉn th·ªã s·ªë
            elif value > 0:
                text = font.render(str(value), True, (0, 0, 0))
                screen.blit(text, (x + cell_size // 3, y + cell_size // 4))

            # Vi·ªÅn √¥
            pygame.draw.rect(screen, (0, 0, 0), (x, y, cell_size, cell_size), 1)

    # V·∫Ω ch·ªâ s·ªë h√†ng (b√™n tr√°i) v√† ch·ªâ s·ªë c·ªôt (tr√™n c√πng)
    for i in range(size):
        # Ch·ªâ s·ªë h√†ng (b√™n tr√°i)
        row_label = font.render(str(i), True, (0, 0, 0))
        screen.blit(row_label, (padding // 3, i * cell_size + padding + cell_size // 3))

        # Ch·ªâ s·ªë c·ªôt (tr√™n c√πng)
        col_label = font.render(str(i), True, (0, 0, 0))
        screen.blit(col_label, (i * cell_size + padding + cell_size // 3, padding // 3))


# X·ª≠ l√Ω s·ª± ki·ªán chu·ªôt
"""def handle_click(table, pos, button, size, cell_size, padding):
    # Tr·ª´ ƒëi padding ƒë·ªÉ t√≠nh ƒë√∫ng v·ªã tr√≠ √¥
    x, y = pos[0] - padding, pos[1] - padding  

    # N·∫øu click v√†o ph·∫ßn ch·ªâ s·ªë h√†ng/c·ªôt th√¨ b·ªè qua
    if x < 0 or y < 0:
        return  

    j, i = x // cell_size, y // cell_size  # X√°c ƒë·ªãnh t·ªça ƒë·ªô (i, j)

    # Ki·ªÉm tra xem c√≥ n·∫±m trong b·∫£ng kh√¥ng
    if 0 <= i < size and 0 <= j < size:
        value, _, real_value = table[i][j]

        if button == 1:  # Chu·ªôt tr√°i (m·ªü √¥)
            if real_value == -3:  # N·∫øu l√† m√¨n ‚Üí Game over
                print("üí• Game Over! B·∫°n ƒë√£ m·ªü ph·∫£i m√¨n.")
                pygame.quit()
                sys.exit()
            elif real_value == -4:  # N·∫øu l√† √¥ an to√†n ‚Üí ƒê√°nh d·∫•u ƒë√£ m·ªü
                table[i][j][0] = -2

        elif button == 3:  # Chu·ªôt ph·∫£i (ƒë√°nh d·∫•u m√¨n)
            if value == 0:  # N·∫øu ch∆∞a m·ªü ‚Üí ƒê√°nh d·∫•u
                table[i][j][0] = -1
            elif value == -1:  # N·∫øu ƒë√£ ƒë√°nh d·∫•u ‚Üí B·ªè d·∫•u
                table[i][j][0] = 0 
"""


# G·ªçi AI b·∫±ng ph√≠m A
def handle_keypress(table, size, key):
    if key == pygame.K_a:  # N·∫øu nh·∫•n ph√≠m 'A'

        # ƒê·∫∑t l·∫°i x√°c su·∫•t c·ªßa t·∫•t c·∫£ c√°c √¥ ch∆∞a m·ªü
        for i in range(size):
            for j in range(size):
                if table[i][j][0] == 0:  # N·∫øu √¥ ch∆∞a m·ªü
                    table[i][j][1] = 0   # Reset x√°c su·∫•t v·ªÅ 0

        print("üìå AI ƒëang x·ª≠ l√Ω...")
        AI.openSafe(table, size, size)
            #print("AI ƒë√£ m·ªü t·∫•t c·∫£ √¥ an to√†n")
        #else: print("üí• Game Over! B·∫°n ƒë√£ m·ªü ph·∫£i m√¨n.") # M·ªü c√°c √¥ an to√†n
        AI.Heuristic(table, size, size)  # Ch·∫°y thu·∫≠t to√°n Heuristic
        AI.selectMine(table, size, size)
        AI.selectCell(table, size, size)
        #AI.selectBestCell(table, size, size)
        #AI.selectCell(table, size, size)  # Ch·ªçn √¥ an to√†n

running = False  # Bi·∫øn ƒëi·ªÅu khi·ªÉn tr·∫°ng th√°i ch·∫°y c·ªßa AI

def handle_keyAuto(table, size, key):
    global running  # S·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c ƒë·ªÉ ki·ªÉm so√°t tr·∫°ng th√°i

    if key == pygame.K_d:  # Khi nh·∫•n 'D', b·∫Øt ƒë·∫ßu ch·∫°y AI
        running = True
        while running:
            # ƒê·∫∑t l·∫°i x√°c su·∫•t c·ªßa t·∫•t c·∫£ c√°c √¥ ch∆∞a m·ªü
            for i in range(size):
                for j in range(size):
                    if table[i][j][0] == 0:  # N·∫øu √¥ ch∆∞a m·ªü
                        table[i][j][1] = 0   # Reset x√°c su·∫•t v·ªÅ 0

            print("üìå AI ƒëang x·ª≠ l√Ω...")
            AI.openSafe(table, size, size)
            AI.Heuristic(table, size, size)
            AI.selectMine(table, size, size)
            AI.selectCell(table, size, size)

            # Th√™m ƒëi·ªÅu ki·ªán d·ª´ng n·∫øu nh·∫≠n ph√≠m 'P'
            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN and event.key == pygame.K_p:
                    running = False
                    print("üõë AI ƒë√£ d·ª´ng.")


def handle_keyCheck(table, size, key):
    if key == pygame.K_s:  # N·∫øu nh·∫•n ph√≠m 'S'
        print("üìå AI ƒëang x·ª≠ l√Ω...")
        AI.checkSolution(table, size)